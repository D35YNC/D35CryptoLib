#include <iostream>
#include <algorithm>
#include <iomanip>

#include "../mycryptolib/public_key/rsa.h"
#include "../mycryptolib/public_key/rsakey.h"
#include "../mycryptolib/encoding/pkcs7.h"
#include "../mycryptolib/encoding/pkcs8.h"
#include "../mycryptolib/encoding/pkcs12.h"

void usage()
{
    std::cout << "./lab3 {keygen, encrypt, decrypt} {--infile [FILENAME], --outfile [FILENAME] --keyfile [FILENAME]} {keysize}" << std::endl;
    exit(0);
}


int main(int argc, char **argv)
{
    std::cout << "Generating 4096 bit keypair ";

    MyCryptoLib::RSAKey keypair = MyCryptoLib::RSAKey::generate(4096);

    std::cout << "[OK]" << std::endl << "Writing privkey to key ";

    std::vector<uint8_t> buffer = keypair.exportPrivateKey().toPem();
    std::ofstream outfile("key");
    outfile.write(reinterpret_cast<char*>(buffer.data()), buffer.size());
    outfile.flush();
    outfile.close();

    std::cout << "[OK]" << std::endl << "Writing pubkey to key.pub ";

    buffer = keypair.exportPublicKey().toPem();
    outfile.open("key.pub");
    outfile.write(reinterpret_cast<char*>(buffer.data()), buffer.size());
    outfile.flush();
    outfile.close();

    std::cout << "[OK]" << std::endl << "Encrypting some data ";

    MyCryptoLib::RSAKey pubk = MyCryptoLib::RSAKey::fromPKCS8File("key.pub");

    std::cout << "[OK]" << std::endl;
    MyCryptoLib::RSA rsa;

    // Some 839 bytes Utf8 string
//    buffer = {0xd0,0x92,0xd1,0x81,0xd0,0xb5,0xd0,0xbc,0x20,0xd0,0xbf,0xd1,0x80,0xd0,0xb8,0xd0,0xb2,0xd0,0xb5,0xd1,0x82,0x20,0xd0,0xbf,0xd0,0xbe,0xd0,0xb4,0xd0,0xbf,0xd0,0xb8,0xd1,0x81,0xd1,0x8b,0xd0,0xb2,0xd0,0xb0,0xd0,0xb9,0xd1,0x82,0xd0,0xb5,0xd1,0x81,0xd1,0x8c,0x20,0xd0,0xbd,0xd0,0xb0,0x20,0xd0,0xbd,0xd0,0xbe,0xd0,0xb2,0xd1,0x8b,0xd0,0xb9,0x20,0xd0,0xbf,0xd0,0xb0,0xd0,0xb1,0xd0,0xbb,0xd0,0xb8,0xd0,0xba,0x20,0xd0,0xbc,0xd0,0xb5,0xd0,0xbc,0xd1,0x8b,0x20,0xd0,0xbf,0xd1,0x80,0xd0,0xbe,0x20,0xd1,0x82,0xd0,0xb5,0xd0,0xbe,0xd1,0x80,0xd0,0xb8,0xd1,0x8e,0x20,0xd0,0xbf,0xd0,0xb8,0xd1,0x81,0xd1,0x82,0xd0,0xbe,0xd0,0xbb,0xd0,0xb5,0xd1,0x82,0xd0,0xbe,0xd0,0xb2,0x20,0xd0,0xbd,0xd0,0xbe,0xd0,0xb2,0xd1,0x8b,0xd0,0xb5,0x20,0x6d,0x65,0x6d,0x65,0x73,0x20,0xd0,0xba,0xd0,0xb0,0xd0,0xb6,0xd0,0xb4,0xd1,0x8b,0xd0,0xb9,0x20,0xd0,0xb4,0xd0,0xb5,0xd0,0xbd,0xd1,0x8c};

    std::ifstream pic("/home/d35ync/xka9otdz.jpg", std::ios::binary);
    pic.seekg(0, std::ios::end);
    size_t picSize = pic.tellg();
    pic.seekg(0, std::ios::beg);
    buffer.resize(picSize);
    pic.read(reinterpret_cast<char*>(buffer.data()), buffer.size());

    buffer = rsa.encrypt("TEXT", buffer, pubk).toPem(); // PKCS7
    std::cout << "Writing encrypted data to data.enc ";
    outfile.open("data.enc");
    outfile.write(reinterpret_cast<char*>(buffer.data()), buffer.size());
    outfile.close();

    std::cout << "[OK]" << std::endl << "Loading privkey ";
    MyCryptoLib::RSAKey privk = MyCryptoLib::RSAKey::fromPKCS12File("key");
    std::cout << "[OK]" << std::endl << "Decrypting data.enc";

    buffer = rsa.decrypt(MyCryptoLib::PKCS7("data.enc"), privk);

    outfile.open("data.enc.dec");
    outfile.write(reinterpret_cast<char*>(buffer.data()), buffer.size());
    outfile.flush();
    outfile.close();
    std::cout << " [OK]" << std::endl << "END" << std::endl;

    return 0;
}
